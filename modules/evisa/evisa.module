<?php

use Drupal\user\Entity\User;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
/**
 * Implements hook_form_FORM_ID_alter().
 */
function evisa_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    // Alter login form and add own custom submit handler.
    case 'user_login_form':
      $form['#submit'][] = '_evisa_user_login_form_submit';
      break;
  }
}

/**
 * Custom submit handler for login form.
 */
function _evisa_user_login_form_submit($form, FormStateInterface $form_state) {
    $roles = \Drupal::currentUser()->getRoles();
    if(in_array('agent', $roles)){
      $form_state->setRedirect('evisa.agent.home');  
    } else if(in_array('sales_user', $roles)) {
      $form_state->setRedirect('evisa.sales.report');  
    } else if(in_array('finance_user', $roles)) {
      $form_state->setRedirect('evisa.visa');  
    } else if(in_array('operation_user', $roles)) {
      $form_state->setRedirect('evisa.visa');  
    } else {
      $form_state->setRedirect('evisa.visa');  
    }
    
}    

function evisa_welcome() {
     $user = User::load(\Drupal::currentUser()->id());
     if ($user->get('uid')->value < 1) {
         return t('Welcome  Visitor!');
     } else {
        return t('Welcome  ' . $user->getUsername() . '!');
     }
}
function evisa_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.evisa':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Hello module is used for creating structured, multi-page content, such as site resource guides, manuals, and wikis. It allows you to create content that has chapters, sections, subsections, or any similarly-tiered structure. Enabling the module creates a new content type <em>Book page</em>. For more information, see the <a href=":book">online documentation for the Book module</a>.', [':book' => 'https://www.drupal.org/documentation/modules/book']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      return $output;
}
}
/**
 * Get Customer Id for Current user
 */
function getCustomerId($agent_id=NULL) {
    $customerId = '';
    if($agent_id){
        $user = User::load($agent_id);
    } else {
        $user = User::load(\Drupal::currentUser()->id());
    }
    foreach($user->get('field_customer_name') as $custId){
        $customerId = $custId->target_id;
    }
    return $customerId;
}
/**
 * Get Customer name from ID
 */
function getCustomerName($custId) {
   $customerName = \Drupal::database()->select('node_field_data', 'nf')
                   ->fields('nf', ['title'])
                   ->condition('nf.nid', $custId)
                   ->execute()->fetchField();
   return $customerName;
}
/**
 * Fetch all countries
 * @return Array Array of cids & country_names
 */
function getAllCountry($dropDown = FALSE) {
$results = []; 
$query = \Drupal::database()->select('country', 'c')
         ->fields('c', ['cid','country_name']);
$records = $query->execute()->fetchAll();
if($dropDown) {
foreach($records as $row) {
            $results[$row->cid] = $row->country_name;
        }
        return $results;    
} else {
    return $records;
}
}
/**
 * Fetch a country based on Country ID
 * @param Numeric $cid Country ID
 * @return Array Array of cid & country_name
 */
function getCountryFromId($cid) {
    $query = \Drupal::database()->select('country', 'c')
                   ->fields('c', ['cid', 'country_name'])
                   ->condition('cid', $cid);
    $record = $query->execute()->fetchAssoc();
    return $record;
}
/**
 * Fetch all Nationalities
 * @return Array Array of naids & nationality_names
 */
function getAllNationality($dropDown = FALSE) {
$results = [];    
$query = \Drupal::database()->select('nationality', 'n')
         ->fields('n', ['naid','nationality_name']);
$records = $query->execute()->fetchAll();    
if($dropDown) {
foreach($records as $row) {
            $results[$row->naid] = $row->nationality_name;
        }
        return $results;    
} else {
    return $records;
}
}
/**
 * Fetch a Nationality based on Nationality ID
 * @param Numeric $naid Nationality ID
 * @return Array Array of naid & nationality_name
 */
function getNationalityFromId($cid) {
    $query = \Drupal::database()->select('nationality', 'n')
                   ->fields('n', ['naid', 'nationality_name'])
                   ->condition('naid', $cid);
    $record = $query->execute()->fetchAssoc();
    return $record;
}
/**
 * Fetch all Purposes
 * @return Array Array of pids & purpose_travels
 */
function getAllPurpose() {
$query = \Drupal::database()->select('purpose_of_travel', 'p')
         ->fields('p', ['pid','purpose_travel']);
$records = $query->execute()->fetchAll();    
return $records;
}
/**
 * Fetch a Purpose based on purpose ID
 * @param Numeric $pid Purpose of Travel ID
 * @return Array Array of pid & purpose_travel
 */
function getPurposeFromId($cid) {
    $query = \Drupal::database()->select('purpose_of_travel', 'p')
                   ->fields('p', ['pid', 'purpose_travel'])
                   ->condition('pid', $cid);
    $record = $query->execute()->fetchAssoc();
    return $record;
}
/**
 * Fetch all Visa types
 * @return Array Array of vtids & visa_types
 */
function getAllVisaType($dropDown = FALSE) {
$results = [];    
$query = \Drupal::database()->select('visa_types', 'vt')
         ->fields('vt', ['vtid','visa_type']);
$records = $query->execute()->fetchAll();  
if($dropDown) {
foreach($records as $row) {
            $results[$row->vtid] = $row->visa_type;
        }
        return $results;    
} else {
    return $records;
}

}
/**
 * Fetch a Visa type based on visa type ID
 * @param Numeric $cid Visa type ID
 * @return Array Array of vtid & visa_type
 */
function getVisaTypeFromId($cid) {
    $query = \Drupal::database()->select('visa_types', 'vt')
                   ->fields('vt', ['vtid', 'visa_type'])
                   ->condition('vtid', $cid);
    $record = $query->execute()->fetchAssoc();
    return $record;
}
/**
 * Fetch Country Purpose data
 */
function getAllCountryPurposes() {
    $query = \Drupal::database()->select('country_purpose_assoc', 'cp');
    $query->join('country', 'c', 'c.cid = cp.acid');
    $query->join('purpose_of_travel', 'p', 'p.pid = cp.apid');
    $query->fields('c', ['country_name']);
    $query->addExpression('GROUP_CONCAT(p.purpose_travel)', 'purpose_travel');
    $query->groupBy('c.country_name');
    $record = $query->execute()->fetchAll();
    return $record;
}
/**
 * Fetch Purpose of travel data based on Country ID
 */
function getPurposeBasedCountry($selected,$dropDown) {
    $results = [];
    $query = \Drupal::database()->select('country_purpose_assoc', 'cp');
    $query->join('purpose_of_travel', 'p', 'p.pid = cp.apid');
    $query->fields('p', ['pid', 'purpose_travel']);
    $query->condition('cp.acid', $selected);
    $record = $query->execute()->fetchAll();
    if($dropDown) {
        foreach($record as $row) {
            $results[$row->pid] = $row->purpose_travel;
        }
        return $results;
    } else {
      return $record;
    }
    
}
/**
 * Fetch Country, Purpose of travel & Visa type data
 */
function getAllCountryPurposeVisa() {
    $query = \Drupal::database()->select('country_purpose_visa_assoc', 'cpv');
    $query->join('country', 'c', 'c.cid = cpv.acid');
    $query->join('purpose_of_travel', 'p', 'p.pid = cpv.apid');
    $query->join('visa_types', 'v', 'v.vtid = cpv.avid');
    $query->fields('c', ['country_name']);
    $query->fields('p', ['purpose_travel']);
    $query->addExpression('GROUP_CONCAT(v.visa_type)', 'visa_type');
    $query->groupBy('c.country_name');
    $query->groupBy('p.purpose_travel');
    $record = $query->execute()->fetchAll();
    return $record;
}
/**
 * Get Visa type based on Country & Purpose of Travel
 */
function getVisaBasedCountryPurpose($country_id, $purpose_id, $dropDown) {
    $results = [];
    $query = \Drupal::database()->select('country_purpose_visa_assoc', 'cpv');
    $query->join('visa_types', 'v', 'v.vtid = cpv.avid');
    $query->fields('v', ['vtid', 'visa_type']);
    $query->condition('cpv.acid', $country_id);
    $query->condition('cpv.apid', $purpose_id);
    $record = $query->execute()->fetchAll();
    if($dropDown) {
        foreach($record as $row) {
            $results[$row->vtid] = $row->visa_type;
        }
        return $results;
    } else {
      return $record;
    }   
}
/**
 * Get price Assignment for all customer
 */
function getPriceAssignment() {
    $query = \Drupal::database()->select('price_assignment', 'pa');
    $query->join('country', 'c', 'c.cid = pa.country_id');
    $query->join('purpose_of_travel', 'p', 'p.pid = pa.purpose_id');
    $query->join('visa_types', 'v', 'v.vtid = pa.visa_type_id');
    $query->join('node_field_data', 'nf', 'nf.nid = pa.customer_id');
    $query->fields('c', ['country_name']);
    $query->fields('p', ['purpose_travel']);
    $query->fields('v', ['visa_type']);
    $query->fields('pa', ['id', 'price']);
    $query->addField('nf','title', 'customer_name');
    $record = $query->execute()->fetchAll();
    return $record;  
}
/**
 * Get price Assignment for individual customer for edit
 */
function getPriceAssigned($id) {
    $query = \Drupal::database()->select('price_assignment', 'pa');
    $query->join('country', 'c', 'c.cid = pa.country_id');
    $query->join('purpose_of_travel', 'p', 'p.pid = pa.purpose_id');
    $query->join('visa_types', 'v', 'v.vtid = pa.visa_type_id');
    $query->join('node_field_data', 'nf', 'nf.nid = pa.customer_id');
    $query->fields('c', ['country_name']);
    $query->fields('p', ['purpose_travel']);
    $query->fields('v', ['visa_type']);
    $query->addField('nf','title', 'customer_name');
    $query->fields('pa', ['id','customer_id','country_id','purpose_id','visa_type_id','price', 'urgent_price']);
    $query->condition('pa.id',$id);
    $record = $query->execute()->fetchAssoc();
    return $record;  
}
/**
 * Implements hook_mail
 */
function evisa_mail($key, &$message, $params) {
/*module_load_include('mail.inc', 'evisa');    
send_email($key, $message, $params);    */
    switch ($key) {
        case 'price_assign_update':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('Kamles Test Subject');
            $message['body'][] = t('Dear Admin, <br /> Visa Price of @customer for @country @purpose @visatype has been updated from @oldprice to @price', array('@customer' => $params['customer_name'], '@country' => $params['country_name'], '@purpose' => $params['purpose_type'], '@visatype' => $params['visa_type'], '@oldprice' => $params['old_price'], '@price' => $params['price']));
            break;
        case 'approved_visa':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('Your Visa has been Approved');
            $visaDetail = visaDetail($params['$report_id']);
            $message['body'][] = t('Dear Agent, <br /> Your Visa has been <b>Approved</b> for Passport Number @passsport', array('@passsport' => $visaDetail['passport_no']));
            break;
        case 'rejected_visa':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('Your Visa has been rejected');
            $visaDetail = visaDetail($params['$report_id']);
            $message['body'][] = t('Dear Agent, <br /> Your Visa has been <b>Rejected</b> by visa authority for Passport Number @passsport', array('@passsport' => $visaDetail['passport_no']));
            break;
    }   
}
/**
 * Get Cummulative Amount
 * @param INT $customer_id Customer ID
 */
function getCumAmount($customer_id) {
  $amount = \Drupal::database()->select('account_txn', 'at')
          ->fields('at', ['cum_amount'])
          ->condition('at.customer_id', $customer_id)
          ->orderBy('id','DESC')
          ->execute()->fetchField();
  return $amount;
}
/**
 * Get price for online Visa
 */
function getVisaPrice($country_id,$purpose_travel,$visa_type,$customerId,$nationality,$urgent_visa) {
    $price = \Drupal::database()->select('price_assignment', 'pa')
            ->fields('pa',['price', 'urgent_price'])
            ->condition('pa.country_id', $country_id)
            ->condition('pa.customer_id', $customerId)
            ->condition('pa.purpose_id', $purpose_travel)
            ->condition('pa.visa_type_id', $visa_type)
            ->execute()->fetchAssoc();
    return $price;
}
/**
 * Download File
 */
function evisa_file_download($newfile) {
    $headers = file_get_content_headers($newfile);
    return $headers;    
}
/**
 * Get Visa detail based on ID
 */
function visaDetail($visa_id) {
        $query = \Drupal::database()->select('visa_report', 'vr');
        $query->join('visa', 'v', 'v.id = vr.visa_id');
        //$query->fields('vr', ['id','visa_id','customer_name','destination_name','purpose_name','visa_type_name','nationality','visa_price','urgent','name','passport_no', 'father_name', 'mother_name', 'created', 'status_id', 'agent_id', 'app_ref', 'contact']);
        $query->fields('vr');
        $query->fields('v', ['pas_photo_id','pas_passport_first_id','pas_passport_last_id','pas_sup_doc_1','pas_sup_doc_2','pas_ticket', 'reference_no', 'reject_reason', 'approved_visa']);
        $query->condition('vr.id', $visa_id);
        $visdet = $query->execute()->fetchAssoc();
        return $visdet;
}
/**
 * View Visa Template
 */
function evisa_theme($existing, $type, $theme, $path) {
  return [
    'view_visa' => [
      'variables' => ['visa_detail' => NULL, 'photo_url' => NULL, 'pass_first' => NULL, 'pass_last' => NULL, 'sup_doc_1' => NULL, 'sup_doc_2' => NULL, 'ticket' => NULL],
    ],
    'download_visa' => [
      'variables' => ['price_detail' => NULL],
    ],
    'agent' => [
      'variables' => ['user_name' => NULL, 'price_info' => NULL, 'login' => NULL],
    ],  
    'visa_edit_form' => [
      'render element' => 'form',
    ],  
    'mis_report' => [
      'render element' => 'form',
    ],
    'multistep_form_two' => [
      'render element' => 'form',
    ],
    'multistep_form_three' => [
      'render element' => 'form',
    ],
    'master_page' => [
      'variables' => ['menuItems' => NULL],
    ],
  ];
}
/**
 * Get Uploaded file URL from file ID
 */
function getUpFileUrl($fileId) {
   $fileUrl = '';
   if(!empty($fileId)) {
        $newfile = \Drupal\file\Entity\File::load($fileId);
        $uri = $newfile->getFileUri();
        $fileUrl = Url::fromUri(file_create_url($uri));
   }
   return $fileUrl;
}
/**
 * Run Cron to block Customer
 */
function evisa_cron() {
    $today = strtotime(date('Y-m-d'));
    $customer_id = [];
    $custVals = \Drupal::database()->select('block_customer', 'bc')
            ->fields('bc',['customer_id'])
            ->condition('bc.block', 0)
            ->condition('bc.block_date', $today)
            ->execute()->fetchAll();
    foreach($custVals as $custVal) {
      $customer_id[] = $custVal->customer_id;  
    }
    if(count($customer_id)) {
       $updateCust = \Drupal::database()->update('block_customer')
               ->fields([
                   'block' => 1
               ])
               ->condition('customer_id', $customer_id, 'IN')
               ->execute();
       \Drupal::logger('evisa')->notice('Blocked @customer', array('@customer' => implode(',', $customer_id)));
    }
}
/**
 * Get blocked customer 
 */
function getBlockedCustomer() {
    $blocked = \Drupal::database()->select('block_customer', 'bc');
    $blocked->join('node_field_data', 'nf', 'nf.nid = bc.customer_id');
    $blocked->addField('nf','title', 'customer_name');
    $blocked->fields('bc', ['id','block_date']);
    $blocked->condition('bc.block', 1);
    $record = $blocked->execute()->fetchAll();
    return $record;
}
/**
 * Get blocked customer data
 */
function getBlockedData($blockId) {
    $blocked = \Drupal::database()->select('block_customer', 'bc');
    $blocked->join('node_field_data', 'nf', 'nf.nid = bc.customer_id');
    $blocked->addField('nf','title', 'customer_name');
    $blocked->fields('bc', ['id','block_date']);
    $blocked->condition('bc.id', $blockId);
    $record = $blocked->execute()->fetchAssoc();
    return $record;
}
/**
 * Get Customer Status
 */
function getBlockedStatus($customerId) {
    $blocked = \Drupal::database()->select('block_customer', 'bc')
            ->fields('bc', ['block'])
            ->condition('bc.customer_id', $customerId)
            ->execute()->fetchField();
    return ($blocked) ? TRUE : FALSE;
    
}
/**
 * Get Sales report data
 */
function getSalesReportData() {
   $user = User::load(\Drupal::currentUser()->id());
   $roles = $user->getRoles();
   if(in_array('sales_user', $roles)) {
       $salesCustomer = getSalesCustomer();
   } else if(in_array('admin', $roles) || in_array('administrator', $roles)) {
       $salesCustomer = getAllCustomer();
   } else {
       $salesCustomer = array();
   }
   //Get Sales Report Data
   $query = \Drupal::database()->select('visa', 'v');
   $query->join('node_field_data', 'nf', 'nf.nid = v.customer_id');
   $query->addField('nf','title', 'customer_name');
   $query->addExpression('count(v.id)', 'total_visa');
   $query->addExpression('sum(v.visa_price)', 'total_visa_price');
   $query->addExpression('max(v.created_date)', 'last_transaction');
   $query->groupBy('v.customer_id');
   $query->groupBy('nf.title');
   $record = $query->execute()->fetchAll();
   return $record;
}
/**
 * Get Sales User affiliated customer
 */
function getSalesCustomer($full = FALSE) {
   $userId = \Drupal::currentUser()->id();
   $query = \Drupal::database()->select('node__field_sales_user', 'su')
      ->fields('su',['entity_id'])      
      ->condition('bundle', 'customer')
      ->condition('field_sales_user_target_id', $userId);
    $custids = $query->execute()->fetchAll();
    $cids = array();
    foreach($custids as $custid) {
      $cids[] = $custid->entity_id;  
    }
    if($full) {
    $query = \Drupal::database()->select('node_field_data', 'n')
      ->fields('n',['nid', 'title'])      
      ->condition('type', 'customer')
      ->condition('nid', $cids, 'IN');
    $custs = $query->execute()->fetchAll();
    $cids = array();
    foreach($custs as $cust) {
      $cids[$cust->nid] = $cust->title;  
    }
    }        
    return $cids;
}
/**
 * Get All Customer ID for Admin & Administrator
 */
function getAllCustomer($full = FALSE) {
    $cids = \Drupal::entityQuery('node')
      ->condition('type', 'customer')
      ->execute();      
    if($full) {
    $query = \Drupal::database()->select('node_field_data', 'n')
      ->fields('n',['nid', 'title'])      
      ->condition('type', 'customer')
      ->condition('nid', $cids, 'IN');
    $custs = $query->execute()->fetchAll();
    $cids = array();
    foreach($custs as $cust) {
      $cids[$cust->nid] = $cust->title;  
    }
    }
    return $cids;
}
/**
 * Get Visa Document List
 */
function getVisaDoc($vid = NULL) {
    $query = \Drupal::database()->select('visa_document', 'vd');
    $query->join('country', 'c', 'c.cid = vd.country_id');
    $query->join('purpose_of_travel', 'p', 'p.pid = vd.purpose_id');
    $query->join('visa_types', 'vt', 'vt.vtid = vd.visa_type_id');
    $query->addField('c', 'country_name');
    $query->addField('p', 'purpose_travel');
    $query->addField('vt', 'visa_type');
    $query->fields('vd', ['id', 'document', 'country_id', 'purpose_id', 'visa_type_id']);
    if($vid) {
      $query->condition('vd.id', $vid);
      $result = $query->execute()->fetchAssoc();
    } else {
      $result = $query->execute()->fetchAll();  
    }
    
    return $result;
}
/**
 * Get Viss document based on country id, purpose id, visa type id
 */
function getDocument($country_id, $purpose_travel_id, $visa_type_id) {
    $document = \Drupal::database()->select('visa_document', 'vd')
        ->fields('vd', ['document'])
        ->condition('country_id', $country_id)
        ->condition('purpose_id', $purpose_travel_id)
        ->condition('visa_type_id', $visa_type_id)
        ->execute()->fetchField();
    return $document;    
}
/**
 * Get last five visa status
 */
function getLatestVisa() {
    $roles = \Drupal::currentUser()->getRoles();
    $result = [];
    if(in_array('agent', $roles)){
        $query = \Drupal::database()->select('visa_report', 'vr');
        $query->fields('vr', ['destination_name','purpose_name','visa_type_name','name','passport_no','status_id', 'app_ref']);
        $query->condition('vr.customer_id', getCustomerId());
        $query->orderBy('id','DESC');
        $query->range(0,5);
        $result = $query->execute()->fetchAll();
        return $result;        
    } else {
        return $result;
    }
}
function getRoe() {
    
  $query = \Drupal::database()->select('rate_exchange', 're');
  $query->join('country', 'c', 'c.cid = re.cid');
  $query->addField('c', 'country_name');
  $query->fields('re');
  $roes = $query->execute()->fetchAll();
  return $roes;
}

function getRoeFromId($id) {
  $result = \Drupal::database()->select('rate_exchange', 're')
         ->fields('re') 
         ->condition('re.rid', $id)
         ->execute()->fetchAssoc();
  return $result;       
}
function getRoeFromCountry($cid) {
  $result = \Drupal::database()->select('rate_exchange', 're')
         ->fields('re', ['roe']) 
         ->condition('re.cid', $cid)
         ->execute()->fetchField();
  return $result;       
}